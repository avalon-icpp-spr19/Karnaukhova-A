#include <iostream>
#include <string>
#include <limits>
#include "Extention.h"

using namespace std;
using namespace ext;

struct Point
{
	float x;
	float y;
};

struct Circle
{
	int rad;
	Point cr;
};

int main ()
{
	setlocale(LC_ALL, "");
	cout << "#1" << endl;
	//Задание №1
	//Создать структуру Point, содержащую два поля x, y типа float.
	//Создать и проинициализировать переменную типа Point.	
	//Создать переменную типа Point и проинициализировать ее данными с клавиатуры.
	Point p = { 10.5, 15.3 };
	//Вывести на экран значения x, y вышеобъявленных переменных.
	cout << p.x << "; " << p.y << endl;
	//Написать программу, которая определеяет принадлежит ли заданная точка кругу заданного радиуса.
	//Координаты точки и радиус пользователь вводит с клавиатуры.
	//Для хранения координат точки использовать структуру Point.
	int r;
	cin >> r;
	cin >> p.x;
	cin >> p.y;
	if (p.x*p.x + p.y*p.y <= r*r)
	{
		cout << "Точка принадлежит кругу";
	}
	else
	{
		cout << "Точка не принадлежит кругу";
	}
	//Написать программу, которая по двум заданным точкам - концам отрезка находит точку середины отрезка.
	//Координаты точек пользователь вводит с клавиатуры.
	//Для хранения координат точек использовать структуру Point.
	//Рассчитанную точку середины отрезка также хранить как структуру Point.
	//Вывести координаты полученной точки в консоль.
	Point c;
	Point b;
	cin >> p.x;
	cin >> p.y;
	cin >> c.x;
	cin >> c.y;
	if (p.x <= c.x)
	{
		b.x = ((c.x - p.x) / 2) + p.x;
	}
	else
	{
		b.x = ((p.x - c.x) / 2) + c.x;
	}
	if (p.y <= c.y)
	{
		b.y = ((c.y - p.y) / 2)+ p.y;
	}
	else
	{
		b.y = ((p.y - c.y) / 2) + c.y;
	}
	cout << b.x << " " << b.y << endl;
	cout << "#2" << endl;
	//Задание №2
	//Создать структуру Circle, содержащую одно поле типа int - радиус и второе поле типа Point - центр окружности.
	//Создать и проинициализировать переменную типа Circle.
	Circle cir = { 10, 5, 4 };
	//Создать переменную типа Circle и проинициализировать ее данными введенными с клавиатуры.
	Circle cir2;
	cin >> cir2.rad;
	cin >> cir2.cr.x;
	cin >> cir2.cr.y;
	//Вывести на экран данные, сохраненные в вышеобъявленных переменных.
	cout << cir.rad << "; " << cir.cr.x << "; " << cir.cr.y << endl;
	cout << cir2.rad << "; " << cir2.cr.x << "; " << cir2.cr.y << endl;
	//Даны две переменные типа Circle.
	//Написать программу, которая определяет пересекаются ли окружности,
	//описанные данными переменными.
	Circle a;
	Circle d;
	cin >> a.rad;
	cin >> a.cr.x;
	cin >> a.cr.y;
	cin >> d.rad;
	cin >> d.cr.x;
	cin >> d.cr.y;
	if ((sqrt(pow(2, (a.cr.x - d.cr.x)) + pow(2, (a.cr.y - d.cr.y)))) < a.rad + d.rad)
	{
		cout << "Окружности пересекаются" << endl;
	}
	else
	{
		cout << "Окружности не пересекаются" << endl;
	}
	cout << "#3" << endl;
	//Задание №3
	//Создать перечисление (enum) Color, для хранения 7 цветов радуги.
	//Создать структуру Triangle, содержащее поле типа Color
	//и массив для хранения трех элементов типа int (длины сторон).
	//Создать и проинициализировать переменную типа Triangle корректными данными.
	//Вывести на экран данные, сохраненные в вышеобъявленной переменной.
	//Значение поля Color вывести в текстовом виде. (использовать конструкцию switch).
	//Рассчитать и вывести на экран периметр вышеобъявленного треугольника.

	//Задание №4
	//Создать массив из 20 элеметнов типа Point.
	Point parr[20];
	//Проинициализировать его точками со случайными значениями координат в пределах от 0 до 100.
	for (int i; i < 20; ++i)
	{
		parr[i].x = GetRandomValue(0, 100);
		parr[i].y = GetRandomValue(0, 100);
	}
	//Выведите на экран координаты:
	//- точки с наименьшей x координатой
	int minx, miny;
	minx = parr[0].x;
	for (int i; i < 20; ++i)
	{
		if (parr[i].x < minx)
		{
			minx = parr[i].x;
			miny = parr[i].y;
		}
	}
	cout << minx << "; " << miny;
	//- двух точек, расстояние между которыми минимально.
	

	//Задание №5
	//Создать массив из 100 элементов типа Triangle.
	//Проинициализировать его случайными значениями (длина стороны от 1 до 10).
	//При инициализации проверять, что треугольник с такими длинами сторон может существовать.
	//(Длина каждой стороны должна быть строго меньше длин суммы двух других сторон).
	//Обработать полученный массив треугольников и вывести на экран следующую информацию:
	//- вывести на экран все треугольники, периметр которых превышает значение, введенное с клавиатуры.
	//Если подходящих треугольников нет, вывести соответствующее сообщение.
	//- количество треугольников каждого цвета

	//Задание №6
	//Написать программу, которая проверяет правильность заданных значений даты.
	//Дату хранить с использованием структуры.
	//Тестовые данные				Ожидаемый результат
	//1 1 1992					Дата корректна
	//30 6 1992					Дата корректна
	//31 7 1992					Дата коррентна
	//31 9 1994					Дата некорректна
	//32 1 1992					Дана некорректна
	//1 13 1992					Дата некорректна
	//29 2 1993					Дата некорректна
	//29 2 2004					Дата корректна
	//29 2 1900					Дата некоррентна
	//29 2 2000					Дата корректна
	
}
